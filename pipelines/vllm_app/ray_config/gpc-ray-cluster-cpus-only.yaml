auth:
  ssh_user: ray 
  ssh_private_key: ~/.ssh/ray-autoscaler

cluster_name: ray-cluster

file_mounts: {}

provider:
  type: gcp
  region: us-central1
  availability_zone: us-central1-f
  project_id: llm-ft-442520

# The maximum number of workers nodes to launch in addition to the head
# node.
max_workers: 2

# The autoscaler will scale up the cluster faster with higher upscaling speed.
# E.g., if the task requires adding more nodes then autoscaler will gradually
# scale up the cluster in chunks of upscaling_speed*currently_running_nodes.
# This number should be > 0.
upscaling_speed: 1.0

# This executes all commands on all nodes in the docker container,
# and opens all the necessary ports to support the Ray cluster.
# Empty string means disabled.
docker: {}

# If a node is idle for this many minutes, it will be removed.
idle_timeout_minutes: 30

available_node_types:
  head_node:
    node_config:
      machineType: t2a-standard-4 
      disks:
        - boot: true
          autoDelete: true
          type: PERSISTENT
          initializeParams:
            diskSizeGb: 50
            diskType: zones/asia-southeast1-b/diskTypes/pd-standard
            sourceImage: projects/ubuntu-os-cloud/global/images/ubuntu-2204-jammy-arm64-v20241119
    resources: {"CPU": 4}

  worker_node:
    min_workers: 1  # At least one worker node will start
    max_workers: 1  # Can scale up to three worker nodes based on workload
    node_config:
      machineType: t2a-standard-4
      disks:
        - boot: true
          autoDelete: true
          type: PERSISTENT
          initializeParams:
            diskSizeGb: 50
            diskType: zones/asia-southeast1-b/diskTypes/pd-standard
            sourceImage: projects/ubuntu-os-cloud/global/images/ubuntu-2204-jammy-arm64-v20241119
      serviceAccounts:
        - email: ray-autoscaler-sa-v1@llm-ft-442520.iam.gserviceaccount.com
          scopes:
            - https://www.googleapis.com/auth/cloud-platform
    resources: {"CPU": 4}
# Specify the node type of the head node (as configured above).
head_node_type: head_node

# Files or directories to copy to the head and worker nodes. The format is a
# dictionary from REMOTE_PATH: LOCAL_PATH, e.g.
file_mounts: {
}

# Files or directories to copy from the head node to the worker nodes. The format is a
# list of paths. The same path on the head node will be copied to the worker node.
# This behavior is a subset of the file_mounts behavior. In the vast majority of cases
# you should just use file_mounts. Only use this if you know what you're doing!
cluster_synced_files: []

# Whether changes to directories in file_mounts or cluster_synced_files in the head node
# should sync to the worker node continuously
file_mounts_sync_continuously: False

# Patterns for files to exclude when running rsync up or rsync down
rsync_exclude: []

# Pattern files to use for filtering out files when running rsync up or rsync down. The file is searched for
# in the source directory and recursively through all subdirectories. For example, if .gitignore is provided
# as a value, the behavior will match git's behavior for finding and using .gitignore files.
rsync_filter: []

# List of commands that will be run before `setup_commands`. If docker is
# enabled, these commands will run outside the container and before docker
# is setup.
initialization_commands: []

# List of shell commands to run to set up nodes.
setup_commands:
  - |
    echo "Starting setup commands" >> /tmp/init.log
    sudo apt-get update && sudo apt-get install -y wget bzip2 curl software-properties-common || { echo "Failed to install dependencies" >> /tmp/init.log; exit 1; }
    git clone https://github.com/mangohehe/img-classif.git /home/ray/img-classif || { echo "Failed to clone repository" >> /tmp/init.log; exit 1; }
    bash /home/ray/img-classif/pipelines/vllm_app/ray_config/setup_commands.sh
    echo "Completed setup commands" >> /tmp/init.log

# Custom commands that will be run on the head node after common setup.
head_setup_commands:
  - echo "Starting head setup commands" >> /tmp/init.log
  - bash /home/ray/img-classif/pipelines/vllm_app/ray_config/head_setup.sh
  - echo "Completed head setup commands" >> /tmp/init.log

# Custom commands that will be run on worker nodes after common setup.
worker_setup_commands:
  - echo "Starting worker setup commands" >> /tmp/init.log
  - source ~/.bashrc
  - echo "Re-creating environment on worker node..." >> /tmp/init.log
  - conda env create -f /home/ray/environment.yml >> /tmp/init.log 2>&1 || echo "Failed to create Conda environment from environment.yml" >> /tmp/init.log
  - echo "Installing additional worker dependencies..." >> /tmp/init.log
  - source ~/.bashrc && conda activate ray_env && pip install -r /home/ray/img-classif/pipelines/vllm_app/requirements.txt >> /tmp/init.log 2>&1 || echo "Failed to install dependencies from requirements.txt" >> /tmp/init.log
  - echo "Completed worker setup commands" >> /tmp/init.log

# Command to start Ray on the head node.
head_start_ray_commands:
  - echo "Starting Ray on head node" >> /tmp/init.log
  - bash /home/ray/img-classif/pipelines/vllm_app/ray_config/head_start_ray.sh
  - echo "Completed Ray start on head node" >> /tmp/init.log

# Command to start Ray on worker nodes.
worker_start_ray_commands:
  - source ~/.bashrc && conda activate ray_env && ray stop
  - >-
      source ~/.bashrc && conda activate ray_env &&
      ulimit -n 65536;
      ray start
      --address=$RAY_HEAD_IP:6379
      --object-manager-port=8076
