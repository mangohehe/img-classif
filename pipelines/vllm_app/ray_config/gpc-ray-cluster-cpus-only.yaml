auth:
  ssh_user: ray 
  ssh_private_key: ~/.ssh/ray-autoscaler

cluster_name: arm-minimal

file_mounts: {}

provider:
  type: gcp
  region: asia-southeast1
  availability_zone: asia-southeast1-b
  project_id: llm-ft-442520

# The maximum number of workers nodes to launch in addition to the head
# node.
max_workers: 2

# The autoscaler will scale up the cluster faster with higher upscaling speed.
# E.g., if the task requires adding more nodes then autoscaler will gradually
# scale up the cluster in chunks of upscaling_speed*currently_running_nodes.
# This number should be > 0.
upscaling_speed: 1.0

# This executes all commands on all nodes in the docker container,
# and opens all the necessary ports to support the Ray cluster.
# Empty string means disabled.
docker: {}

# If a node is idle for this many minutes, it will be removed.
idle_timeout_minutes: 30

available_node_types:
  head_node:
    node_config:
      machineType: t2a-standard-1
      disks:
        - boot: true
          autoDelete: true
          type: PERSISTENT
          initializeParams:
            diskSizeGb: 20
            diskType: zones/asia-southeast1-b/diskTypes/pd-standard
            sourceImage: projects/ubuntu-os-cloud/global/images/ubuntu-2204-jammy-arm64-v20241119
    resources: {"CPU": 1}

  worker_node:
    min_workers: 2  # At least one worker node will start
    max_workers: 2  # Can scale up to three worker nodes based on workload
    node_config:
      machineType: t2a-standard-1
      disks:
        - boot: true
          autoDelete: true
          type: PERSISTENT
          initializeParams:
            diskSizeGb: 20
            diskType: zones/asia-southeast1-b/diskTypes/pd-standard
            sourceImage: projects/ubuntu-os-cloud/global/images/ubuntu-2204-jammy-arm64-v20241119
      serviceAccounts:
        - email: ray-autoscaler-sa-v1@llm-ft-442520.iam.gserviceaccount.com
          scopes:
            - https://www.googleapis.com/auth/cloud-platform
    resources: {"CPU": 4}
# Specify the node type of the head node (as configured above).
head_node_type: head_node

# Files or directories to copy to the head and worker nodes. The format is a
# dictionary from REMOTE_PATH: LOCAL_PATH, e.g.
file_mounts: {
}

# Files or directories to copy from the head node to the worker nodes. The format is a
# list of paths. The same path on the head node will be copied to the worker node.
# This behavior is a subset of the file_mounts behavior. In the vast majority of cases
# you should just use file_mounts. Only use this if you know what you're doing!
cluster_synced_files: []

# Whether changes to directories in file_mounts or cluster_synced_files in the head node
# should sync to the worker node continuously
file_mounts_sync_continuously: False

# Patterns for files to exclude when running rsync up or rsync down
rsync_exclude: []

# Pattern files to use for filtering out files when running rsync up or rsync down. The file is searched for
# in the source directory and recursively through all subdirectories. For example, if .gitignore is provided
# as a value, the behavior will match git's behavior for finding and using .gitignore files.
rsync_filter: []

# List of commands that will be run before `setup_commands`. If docker is
# enabled, these commands will run outside the container and before docker
# is setup.
initialization_commands: []

# List of shell commands to run to set up nodes.
setup_commands:
  - echo "Starting setup commands" >> /tmp/init.log
  - sudo apt-get update && sudo apt-get install -y wget bzip2 curl software-properties-common || echo "Failed to install dependencies" >> /tmp/init.log
  - sudo apt-get install -y gcc-12 g++-12 libnuma-dev || echo "Failed to install gcc-12, g++-12, libnuma-dev" >> /tmp/init.log
  - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 10 --slave /usr/bin/g++ g++ /usr/bin/gcc-12 || echo "Failed to update alternatives for gcc/g++" >> /tmp/init.log
  - echo "Installing Miniforge..." >> /tmp/init.log
  - wget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh -O miniforge.sh || echo "Failed to download Miniforge" >> /tmp/init.log
  - bash miniforge.sh -b -p $HOME/miniforge3 || echo "Failed to install Miniforge" >> /tmp/init.log
  - rm -f miniforge.sh
  - $HOME/miniforge3/bin/conda init bash || echo "Failed to initialize Conda" >> /tmp/init.log
  - source ~/.bashrc
  - conda config --set auto_activate_base false || echo "Failed to configure Conda" >> /tmp/init.log
  - echo "Creating Conda environment ray_env..." >> /tmp/init.log
  - conda create -n ray_env python=3.10 -y || echo "Failed to create Conda environment" >> /tmp/init.log
  - echo "Activating ray_env and installing dependencies..." >> /tmp/init.log
  - git clone https://github.com/mangohehe/img-classif.git /home/ray/img-classif || echo "Failed to clone repository" >> /tmp/init.log
  - source $HOME/miniforge3/etc/profile.d/conda.sh && conda activate ray_env && pip install -r /home/ray/img-classif/pipelines/vllm_app/requirements.txt >> /tmp/init.log 2>&1 || echo "Failed to install repository dependencies" >> /tmp/init.log
  - source ~/.bashrc && conda activate ray_env && conda install -y pip || echo "Failed to install pip in ray_env" >> /tmp/init.log
  - source ~/.bashrc && conda activate ray_env && conda install --yes gcc_linux-aarch64 || echo "Failed to install conda gcc_linux-aarch64" >> /tmp/init.log
  - source ~/.bashrc && conda activate ray_env && pip install "cmake>=3.26" wheel packaging ninja "setuptools-scm>=8" numpy >> /tmp/init.log 2>&1 || echo "Failed to install build tool dependencies" >> /tmp/init.log
  - source ~/.bashrc && conda activate ray_env && pip install ray[default] ray[serve] cryptography >> /tmp/init.log 2>&1 || echo "Failed to install Ray and dependencies" >> /tmp/init.log
  - source ~/.bashrc && conda activate ray_env && pip install google-cloud-storage >> /tmp/init.log 2>&1 || echo "Failed to install google cloud storage" >> /tmp/init.log
  - source ~/.bashrc && conda activate ray_env && conda install -y -c conda-forge libgl >> /tmp/init.log 2>&1 || echo "Failed to install libgl" >> /tmp/init.log
  - source ~/.bashrc && conda activate ray_env && cd /home/ray/img-classif/pipelines/vllm_app && pip install -e . >> /tmp/init.log 2>&1 || echo "Failed to install the vllm_app package" >> /tmp/init.log
  - source ~/.bashrc && conda activate ray_env && conda env export > /home/ray/environment.yml || echo "Failed to export Conda environment" >> /tmp/init.log
  - echo "Completed setup commands" >> /tmp/init.log

# Custom commands that will be run on the head node after common setup.
head_setup_commands:
  - echo "Starting head setup commands" >> /tmp/init.log
  - source ~/.bashrc
  - echo "Re-creating environment on head node..." >> /tmp/init.log
  - conda env create -f /home/ray/environment.yml >> /tmp/init.log 2>&1 || echo "Failed to create Conda environment from environment.yml" >> /tmp/init.log
  - echo "Installing additional head dependencies..." >> /tmp/init.log
  - source ~/.bashrc && conda activate ray_env && pip install -r /home/ray/img-classif/pipelines/vllm_app/requirements.txt >> /tmp/init.log 2>&1 || echo "Failed to install dependencies from requirements.txt" >> /tmp/init.log
  - source ~/.bashrc && conda activate ray_env && pip install google-api-python-client==1.7.8 >> /tmp/init.log 2>&1 || echo "Failed to install head-specific dependencies" >> /tmp/init.log
  - source ~/.bashrc && conda activate ray_env && sudo apt-get install -y apt-transport-https software-properties-common wget || echo "Failed to install prerequisites" >> /tmp/init.log
  - source ~/.bashrc && conda activate ray_env && sudo mkdir -p /etc/apt/keyrings/ || echo "Failed to create /etc/apt/keyrings/" >> /tmp/init.log
  - source ~/.bashrc && conda activate ray_env && wget -q -O - https://apt.grafana.com/gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/grafana.gpg > /dev/null || echo "Failed to download or convert Grafana GPG key" >> /tmp/init.log
  - source ~/.bashrc && conda activate ray_env && echo "deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list || echo "Failed to add Grafana stable repo" >> /tmp/init.log
  - source ~/.bashrc && conda activate ray_env && echo "deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com beta main" | sudo tee -a /etc/apt/sources.list.d/grafana.list || echo "Failed to add Grafana beta repo" >> /tmp/init.log
  - source ~/.bashrc && conda activate ray_env && sudo apt-get update || echo "Failed to update APT repositories" >> /tmp/init.log
  - source ~/.bashrc && conda activate ray_env && sudo apt-get install -y grafana || echo "Failed to install Grafana OSS" >> /tmp/init.log
  - source ~/.bashrc && conda activate ray_env && sudo chown -R ray:ray /usr/share/grafana || echo "Failed to update ownership of /usr/share/grafana" >> /tmp/init.log
  - source ~/.bashrc && conda activate ray_env && sudo chmod -R 755 /usr/share/grafana || echo "Failed to set permissions for /usr/share/grafana" >> /tmp/init.log
  - source ~/.bashrc && conda activate ray_env && echo "Grafana installation and service start complete" >> /tmp/init.log 
  - echo "Completed head setup commands" >> /tmp/init.log

# Custom commands that will be run on worker nodes after common setup.
worker_setup_commands:
  - echo "Starting worker setup commands" >> /tmp/init.log
  - source ~/.bashrc
  - echo "Re-creating environment on worker node..." >> /tmp/init.log
  - conda env create -f /home/ray/environment.yml >> /tmp/init.log 2>&1 || echo "Failed to create Conda environment from environment.yml" >> /tmp/init.log
  - echo "Installing additional worker dependencies..." >> /tmp/init.log
  - source ~/.bashrc && conda activate ray_env && pip install -r /home/ray/img-classif/pipelines/vllm_app/requirements.txt >> /tmp/init.log 2>&1 || echo "Failed to install dependencies from requirements.txt" >> /tmp/init.log
  - echo "Completed worker setup commands" >> /tmp/init.log

# Command to start Ray on the head node.
head_start_ray_commands:
  - source ~/.bashrc && conda activate ray_env && ray stop
  - >-
    # Set environment variables for Ray Dashboard + Grafana integration:
    RAY_GRAFANA_HOST="http://localhost:3000"
    RAY_GRAFANA_IFRAME_HOST="http://localhost:3000"
    RAY_PROMETHEUS_HOST="http://localhost:9090"
    RAY_PROMETHEUS_NAME="Prometheus"

    source ~/.bashrc && conda activate ray_env &&
    ulimit -n 65536;
    ray start
    --head
    --port=6379
    --dashboard-port=8265
    --object-manager-port=8076
    --autoscaling-config=~/ray_bootstrap_config.yaml
    --dashboard-host=0.0.0.0
    --metrics-export-port=8080
  - source ~/.bashrc && conda activate ray_env &&
    ray metrics launch-prometheus
  - source ~/.bashrc && conda activate ray_env && 
    mkdir -p /tmp/ray/session_latest/metrics/grafana/provisioning/plugins &&
    mkdir -p /tmp/ray/session_latest/metrics/grafana/provisioning/alerting &&
    grafana-server --homepath /usr/share/grafana --config /tmp/ray/session_latest/metrics/grafana/grafana.ini

# Command to start Ray on worker nodes.
worker_start_ray_commands:
  - source ~/.bashrc && conda activate ray_env && ray stop
  - >-
      source ~/.bashrc && conda activate ray_env &&
      ulimit -n 65536;
      ray start
      --address=$RAY_HEAD_IP:6379
      --object-manager-port=8076
